#!/usr/bin/env babel-node

import faker from 'faker';
import Parse from 'parse/node';

import User from './lib/user';
import Follows from './lib/follows';
import Chats from './lib/chats';
import Messages from './lib/messages';

var argv = process.argv;

if(argv.length < 3) {
  throwError('   USAGE : babel-node dataGenerator [COMMAND] [Additional Options]');
}

var {SERVER_URL, APP_ID} = require('../env');

Parse.initialize(APP_ID);
Parse.serverURL = `${SERVER_URL}/parse`;


var Channels = Parse.Object.extend("Channels");

function getUserId(username) {
  return new Promise( (resolve, reject) => {
    new Parse.Query(Parse.User)
      .equalTo("username", username)
      .first()
      .then(
        (currentUser) => { resolve(currentUser.id); },
        (err) => { console.error(error); reject(err); }
      );
  });
}

function promisingOperation() {
  console.log("11");
    return new Promise(function(resolve, reject) {
        setTimeout(function() {
            if( Math.round(Math.random()) )
                resolve('Success!');
            else
                reject('Failure!');
        }, 1000);
    });
}

async function foo() {
    console.log("00");
    var message = await promisingOperation();
    console.log(message);
}

var notNullValue = function(value, fakerValue) {
  return value? value: fakerValue;
}

var login = function(username, callback){

  Parse.User.logIn(username, 'password', {
    success: function(user) {
      callback(user);
    },
    error: function(user, error) {
      console.log(error);
    }
  });

}

function createUser(username, password, email, nickName, profileImage) {

  var user = new Parse.User();

  // Essential values
  user.set("username",    notNullValue(username, faker.internet.userName())); // username
  user.set("password",    notNullValue(password, "password")); // password

  // Additional values
  user.set("email",       notNullValue(email, faker.internet.email()));    // email
  user.set("nickName",    notNullValue(nickName, faker.name.findName()));     // nickName
  user.set("profileImage",notNullValue(profileImage, faker.internet.avatar()));   // profileImage

  user.signUp(null, {
    success: function(user) {
      console.log(JSON.stringify(user, null, '\t'));
    },
    error: function(user, error) {
      console.log("Error: " + error.code + " " + error.message);
    }
  });
};

// data = {keyword, pageNumber, pageSize}
function searchUsers(data) {

  console.log(data);

  let limit = data.pageSize || 20; //constants.DEFAULT_PAGE_SIZE;
  let skip = ((data.pageNumber || 1) - 1) * limit;

  let usernameQuery = new Parse.Query(Parse.User);
  usernameQuery.startsWith("username", data.keyword);

  let emailQuery = new Parse.Query(Parse.User);
  emailQuery.startsWith("email", data.keyword);

  let query = Parse.Query.or(usernameQuery, emailQuery); // TODO check new ??

  if(skip > 0) query = query.skip(skip);
  query = query.limit(limit).ascending('username');

  query.find({
    success: (list) => {
      console.log(list);
    },
    error: (err) => {
      console.log(err);
    },
  });
}

async function createFollow(username, targetUsername){

  var id = await getUserId(username);
  var currentUser = new Parse.User();
  currentUser.id = id;

  id = await getUserId(targetUsername);
  var user = new Parse.User();
  user.id = id;

  var follow = new Follows();
  follow.set("userFrom", currentUser);
  follow.set("userTo", user);
  follow.save().then(
    (follow) => { console.log(follow); },
    (error) => { console.log(error); }
  );

}

function follows(username){

    new Parse.Query(Parse.User)
      .equalTo("username", username)
      .first()
      .then(
        (currentUser) => {
          console.log(currentUser);
          new Parse.Query(Follows)
            .equalTo('userFrom', currentUser)
            .include('userTo')
            .find()
            .then(
              (list) => {
                list.map(followsParseObject);
              },
              (error) => { console.log(error); }
            );
        });

}

function createChat(username1, username2){

  var userQuery1 = new Parse.Query(Parse.User)
  userQuery1.equalTo("username", username1);

  var userQuery2 = new Parse.Query(Parse.User)
  userQuery2.equalTo("username", username2);

  var mainQuery = Parse.Query.or(userQuery1, userQuery2);
  mainQuery.find({
    success: function(results) {

      var currentUser = results[0];
      var targetUser = results[1];
      if(results[1].get("username") == username1){
        currentUser = results[1];
        targetUser = results[0];
      }
      var userId = targetUser.id;

      /*****************************************/
      console.log(currentUser.get("username"), targetUser.get("username"), userId);

      var query = new Parse.Query(Parse.User);
      query.get(userId, {
        success: function(xxxxxxxxxxx) {

          var user = new Parse.User();
          user.id = userId;

          var query = new Parse.Query(Channels);
          query.containsAll("users", [currentUser, user]);
          query.first().then(function(channel) {

            console.log("#1",channel);
            if(!channel) {
              var channels = new Channels();
              channels.addUnique("users", currentUser);
              channels.addUnique("users", user);
              return channels.save();
            }else{
              return Parse.Promise.as(channel);
            }


          }).then(function(channel) {

            console.log("#2",channel);

            var queryChats = new Parse.Query(Chats);
            queryChats.equalTo("user", currentUser);
            queryChats.equalTo("channel", channel);
            queryChats.first().then( (chat) => {

              console.log("#3",chat);

              if(!chat){
                var chats = new Chats();
                chats.set("user", currentUser);
                chats.set("channel", channel);
                chats.save().then(
                  (result) => { console.log(result) },
                  (error) => { console.log(error) }
                );
              }else{
                console.log("이미 존재함 !!!");
              }
            });

          });

        },
        error: function(object, error) {
          console.log(error);
        }
      });



      /*****************************************/
    }
  });

}

function chats(username) {
  new Parse.Query(Parse.User)
    .equalTo("username", username)
    .first()
    .then(
      (currentUser) => {

        console.log(currentUser);
        new Parse.Query(Chats)
          .equalTo('user', currentUser)
          .include('channel.users')
          .find()
          .then(
            (list) => {
              list.map(chatsParseObject);
            },
            (error) => { console.log(error); }
          );


      });
}


function followsParseObject(object){
  var user = object.get('userTo');
  console.log ({
    id: object.id,
    username: user.get('username'),
    email: user.get('email'),
  });
}

function chatsParseObject(object){
  var channel = object.get("channel");
  var users = channel.get("users");

  users.reduceRight(function(acc, item, index, object) {
    if (item.get("username") === 'test1') {
      object.splice(index, 1);
    } else {
      object[index] = {
        id: item.id,
        username: item.get('username'),
        email: item.get('email'),
        nickName: item.get('nickName'),
        profileImage: item.get('profileImage')
      }
    }
  }, []);

  console.log(users);

}

switch (argv[2]) {

  case "user:create":
    if(!argv[3]) { User.create(); } else{ User.create(argv[3]); }
    break;
  case "user:search":
    if(!argv[3]) throwError(' USAGE : dataGenerator user:search [keyword] ');
    User.search({ keyword: argv[3] });
    break;

  case "follows:create":
    if(!argv[3] || !argv[4]) throwError(' USAGE : dataGenerator follow:create [username] [firend\'s username]');
    Follows.create(argv[3], argv[4]);
    break;
  case "follows:remove":
    if(!argv[3] || !argv[4]) throwError(' USAGE : dataGenerator follow:remove [username] [firend\'s username]');
    Follows.remove(argv[3], argv[4]);
    break;
  case "follows:list":
    if(!argv[3]) throwError(' USAGE : dataGenerator follow:list [username] ');
    Follows.load(argv[3]);
    break;

  case "chats:create":
    if(!argv[3] || !argv[4]) throwError(' USAGE : dataGenerator chat:create [username] [firend\'s username]');
    Chats.create(argv[3], argv[4]);
    break;
  case "chats:list":
    if(!argv[3]) throwError(' USAGE : dataGenerator chat:list [username] ');
    Chats.load(argv[3]);
    break;

  case "messages:create":
    if(!argv[3]) throwError(' USAGE : dataGenerator messages:create [chatId]');
    Messages.create(argv[3], argv[4]);
    break;

  case "test":
  //foo();
  console.log(argv[3]);
    getUserId(argv[3]);

    break;
  default:
    console.log("Sorry, we are out of " + argv[2] + ".");
}

function throwError(msg) {
  console.info('\n', msg || 'ERROR !! ', '\n');
  process.exit(0);
}
