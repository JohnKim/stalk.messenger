#!/usr/bin/env node

var fs = require('fs'),
  argv = require('optimist').argv,
  stalkServer = require('../lib/index'),
  utils = require('../lib/utils');

function exit() {
  process.exit(0);
}

process.on('SIGINT', exit);
process.on('SIGTERM', exit);

var help = [
  "usage: session-server [options] ",
  "",
  "Starts a STALK Session Server using the specified command-line options",
  "",
  "options:",
  "  --config OUTFILE    Location of the configuration file for the session server",
  "  --port   PORT       Port that the session server should run on",
  "  --host   DOMAIN     Hostname",
  "  -h, --help          You're staring at it"
].join('\n');

var welcome = [
  " ",
  " ,  ",
  " |\\  ",
  " \\ | ",
  "  | \\ /          OPENSOURCE MESSENGER PROJECT",
  "   \\|/    _,                   SESSION SERVER",
  "    /  __/ /      _____________   __   __ __  ",
  "   | _/ _.'      / __/_  __/ _ | / /  / //_/  ",
  "   |/__/        _\\ \\  / / / __ |/ /__/ ,<    ",
  "    \\          /___/ /_/ /_/ |_/____/_/|_|   ",
  " ",
  " "
].join('\n');

if (argv.h || argv.help || Object.keys(argv).length === 2 || !argv.config) {
  return console.log(help);
}

var config = {}, server;

if (argv.config) {
  try {
    var data = fs.readFileSync(argv.config);
    config = JSON.parse(data.toString());
  } catch (ex) {
    console.error('Error starting session server: ' + ex);
    process.exit(1);
  }
}

var options = {};

if (config.zookeeper) options['zookeeper'] = config.zookeeper;
if (config.redis) options['redis'] = config.redis;
if (config.mongodb) options['mongodb'] = config.redis;

// application id
if (config.app) options['app'] = config.app;

// master key for parse server
if (config.master) options['master'] = config.master;

if (config.home){
  if(config.home.startsWith("/")){
    options['home'] = config.home;
  }else{
    return console.error('\n\n [ERROR] home directory must to be full paths from root(/) \n\n');
  }
}

options['host'] = argv.host || utils.getIP();
options['port'] = 8080;
options['logo'] = welcome;

if (config.port) options['port'] = config.port;
if (argv.port) options['port'] = argv.port;

var pidFilePath = utils.getPidFilePath(options['home'], 'SESSION', options['port']);

if (fs.existsSync(pidFilePath)) {
  fs.unlinkSync(pidFilePath);
}

var pid = require('../lib/pid').create(pidFilePath);
pid.removeOnExit();

server = stalkServer.createSessionServer(options);
